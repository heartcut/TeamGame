@using TeamGame
@using TeamGame.SqlAccess
@using TeamGame.SqlAccess.GameStateModels
@using TeamGame.PlayerHealthBar

@*the two below are for the javascript of course*@
@using TeamGame.JavaScript
@inject BrowserService Service

@inject GameVarsData _db
@inject NavigationManager navManager


<div class="mainwindow" @onmousemove="GameScript.Player1MouseMoved">
    <img src="/media/rainbowcurse.png" style="position: absolute;top:@tc.getRealY();left:@tc.getRealX();z-index:3;">

    <div class="gamewindow">
        @if (choosegame == 0)
        {
            <TeamNumberGame />
        }
        @if (choosegame != 0)
        {
            <player1window>
                <div class="playergame">
                    <!--lmao i love it-->
                    @if (choosegame == 1)
                    {
                        <SixNineGame />
                    }
                    @if (choosegame == 2)
                    {
                        <MakeSquare />
                    }
                    @if (choosegame == 3)
                    {
                        <MemorizeColorNumber />
                    }
                </div>
                <div class="player1health">
                    <!--i use the at ref to reference my other component to communicate acrros them-->
                    <!--yea not too sure how it works yet but hey-->
                    <Player1HealthBar @ref="tc.p1hp" myhealth="GameScript.play1hp" />

                </div>
            </player1window>
            <player2window>
                <div class="playergame">???????????????</div>
                <button @onclick="(()=>tc.p2hp.HealthMinus())">lose health</button>
                <button @onclick="(()=>tc.p2hp.HealthPlus())">gain health</button>
                <div class="player1health">
                    <Player2HealthBar @ref="tc.p2hp" myhealth="GameScript.play2hp" />
                </div>
            </player2window>
            <player3window>
                @*this is how you load components dynamicallys*@
                @*will need to set it up to put in a var for a player and it returns the right game*@
                @dynamicComponent(4)
                <div class="player1health">
                    <Player3HealthBar @ref="tc.p3hp" myhealth="GameScript.play3hp" />
                </div>
            </player3window>
            <player4window>
                @if (GameScript.GetMyGame() == "sng")
                {
                    <SixNineGame @ref="tc.sng4" />
                }
                <div class="player1health">
                    <Player4HealthBar @ref="tc.p4hp" myhealth="GameScript.play4hp" />
                </div>
            </player4window>
        }
    </div>

    <div class="testbuttons">
        <button @onclick="(() => ChooseAGame(0))">team play?</button>
        <button @onclick="(() => ChooseAGame(1))">sixninegame?</button>
        <button @onclick="(() => ChooseAGame(2))">makeasuqre?</button>
        <button @onclick="(() => ChooseAGame(3))">mem colornum</button>
        <button @onclick="(()=>tc.p1hp.HealthMinus())">p1 lose hp</button>
        <button @onclick="(()=>tc.p1hp.HealthPlus())">p1 gain hp</button>
        <a style="color:white;">@GameScript.cursx</a>
        <a style="color:white;">@GameScript.cursy</a>
        <a style="color:white;">@GameScript.Coordinates</a>
        <a style="color:yellow;">@Height</a>
        <a style="color:yellow;">@Width</a>
        @*this is the players in lobby*@
        @*<a style="color:white;">the amount of players in the lobby is:</a>
            <a style="color:white;">@HowManyPlayersInLobby</a>
            <a style="color:white;">you are player:</a>
            <a style="color:white;">@WhatPlayerAmI</a>*@
        <br />


        @if (tc.GameVars is null)
        {
            <a style="color:white;">loading coordinates</a>
        }
        else
        {
            <a style="color:white;">the following are database variables</a>
            <a style="color:white;">@tc.GameVars[0].Xcords</a>
            <a style="color:white;">@tc.GameVars[0].Ycords</a>
            <a style="color:white;">lobby number: </a>
            <a style="color:white;">@tc.GameVars[0].LobbyNumber</a>
            <a style="color:white;">play1 health</a>
            <a style="color:white;">@tc.GameVars[0].P1Health</a>
            <a style="color:white;">play2 health</a>
            <a style="color:white;">@tc.GameVars[0].P2Health</a>
            <a style="color:white;">play3 health</a>
            <a style="color:white;">@tc.GameVars[0].P3Health</a>
            <a style="color:white;">play4 health</a>
            <a style="color:white;">@tc.GameVars[0].P4Health</a>
            <a style="color:red;">what is my game?: </a>
            <a style="color:white;">@GameScript.mycurrentgame</a>




        }
    </div>
    <div class="names">
        <div class="name1">Jesse</div>
        <div class="name2">Jared</div>
        <div class="name3">Cody</div>
        <div class="name4">Matthew</div>
    </div>
    <div class="timer"><strong>@stopwatchvalue</strong></div>
</div>
@code{
    TestClass tc = new TestClass();
    RenderFragment dynamicComponent(int a) => builder =>
    {
        if (a == 4)
        {
            //is player four
            if (GameScript.p4currentgame == "sng")
            {
                //is the sixninegame
                builder.OpenComponent(0, typeof(SixNineGame));
                builder.CloseComponent();
            }
            else if (GameScript.p4currentgame == "another game")
            {
                //render the other game
            }

        }
        if (a == 1)
        {
            //is player one
            if (GameScript.p1currentgame == "sng")
            {
                //is the sixninegame
                builder.OpenComponent(0, typeof(SixNineGame));
                builder.CloseComponent();
            }
            else if (GameScript.p1currentgame == "another game")
            {
                //render the other game
            }

        }

    };
    int choosegame = 1;
    void ChooseAGame(int a)
    {
        choosegame = a;
    }

    protected override async Task OnInitializedAsync()
    {
        TestClass tc = new TestClass();
        //below goes with sql
        tc.GameVars = await _db.GetVars();
        //GetPlayerAmountInLobby();
        //lmao
        StopWatch();
        KeepRunning();

    }

    //oninitizlized async is called twice with server and component render
    //onafter is only called once afterwards so i used it to update the db and not get doubles
    //uncomment for lobby
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        GetPlayerAmountInLobby();
    //    }
    //}

    //js testing
    public int Height { get; set; }
    public int Width { get; set; }

    bool is_rendered = false;
    async Task KeepRunning()
    {
        is_rendered = true;
        while (is_rendered)
        {
            //Task.Delay(1000);
            if (is_rendered)
            {
                //js the three below 
                var dimension = await Service.GetDimensions();
                Height = dimension.Height;
                Width = dimension.Width;

                tc.GameVars = await _db.GetVars();
                await InsertVars();
                StateHasChanged();
            }
        }
    }

    TimeSpan stopwatchvalue = new TimeSpan();
    bool is_stopwatchrunning = false;
    async Task StopWatch()
    {
        is_stopwatchrunning = true;
        while (is_stopwatchrunning)
        {
            await Task.Delay(1000);
            if (is_stopwatchrunning)
            {
                stopwatchvalue = stopwatchvalue.Add(new TimeSpan(0, 0, 1));
                StateHasChanged();
            }
        }
    }
    //uncomment to get the lobby players stuff working
    //public string WhatPlayerAmI;
    //public string HowManyPlayersInLobby;
    //public void GetPlayerAmountInLobby()
    //{
    //    bool pickedmyplayerspot = false;
    //    if (tc.GameVars[0].P1Present == "0")
    //    {
    //        WhatPlayerAmI = "1";
    //        HowManyPlayersInLobby = "1";
    //        pickedmyplayerspot = true;
    //        GameVarModel temp = new GameVarModel();
    //        temp.P1Present = "1";
    //        _db.ChangeAmountOfPlayers(temp, "1");
    //    }
    //    else if (tc.GameVars[0].P2Present == "0" && !pickedmyplayerspot)
    //    {
    //        WhatPlayerAmI = "2";
    //        HowManyPlayersInLobby = "2";
    //        pickedmyplayerspot = true;
    //        GameVarModel temp = new GameVarModel();
    //        temp.P2Present = "1";
    //        _db.ChangeAmountOfPlayers(temp, "2");
    //    }
    //    else if (tc.GameVars[0].P3Present == "0" && !pickedmyplayerspot)
    //    {
    //        WhatPlayerAmI = "3";
    //        HowManyPlayersInLobby = "3";
    //        pickedmyplayerspot = true;
    //        GameVarModel temp = new GameVarModel();
    //        temp.P3Present = "1";
    //        _db.ChangeAmountOfPlayers(temp, "3");
    //    }
    //    else if (tc.GameVars[0].P4Present == "0" && !pickedmyplayerspot)
    //    {
    //        WhatPlayerAmI = "4";
    //        HowManyPlayersInLobby = "4";
    //        pickedmyplayerspot = true;
    //        GameVarModel temp = new GameVarModel();
    //        temp.P4Present = "1";
    //        _db.ChangeAmountOfPlayers(temp, "4");
    //    }
    //    else if (!pickedmyplayerspot)
    //    {
    //        navManager.NavigateTo("/lobbyfull");
    //    }
    //}
    public GameVarModel p = new GameVarModel();
    private async Task InsertVars()
    {
        //converting models types manually
        p.Xcords = GameScript.cursx.ToString();
        p.Ycords = GameScript.cursy.ToString();
        //p.Xcords = newGameVar.Xcords;
        //p.Ycords = newGameVar.Ycords;
        p.P1Health = GameScript.play1hp.ToString();
        p.P2Health = GameScript.play2hp.ToString();

        p.P3Health = GameScript.play3hp.ToString();
        p.P4Health = GameScript.play4hp.ToString();
        //returns the mycurrentgame var because thats all i need to give to the db
        p.MyGame = GameScript.mycurrentgame;
        //actually putting in here
        await _db.PutVars(p);
        //below is adding the person to the table
        //but not from the db from the new created person object p that we put in
        //below is cleaing the slate of the inserted person and the values
        //newGameVar = new DisplayGameVarsModel();
    }





}
